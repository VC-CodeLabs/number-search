#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>

char *find_numbers(const char *line, char *res)
{
    char first_num = '\0', second_num = '\0';
    size_t line_length = strlen(line);
    int first_num_index, second_num_index;

    for (size_t i = 0; line[i] != '\0'; i++)
    {
        if (isdigit((unsigned char)line[i]))
        {
            first_num = line[i];
            first_num_index = i;
            break;
        }
    }

    for (size_t i = line_length - 1; i > first_num_index; i--)
    {
        if (isdigit((unsigned char)line[i]))
        {
            second_num = line[i];
            second_num_index = i;
            break;
        }
    }

    // risky, but should at least always be 1 num? for times sake
    if (second_num == '\0')
    {
        res[0] = first_num;
        res[1] = first_num;
    }
    else
    {
        res[0] = first_num;
        res[1] = second_num;
    }

    return res;
}

int main()
{
    const char *write_file_name = "res.txt";
    // change this guy for whatever testing file you use
    const char *read_file_name = "lines.txt";

    FILE *write_file = fopen("res.txt", "w");
    FILE *read_file = fopen("lines.txt", "r");

    // buffer stuff for getline
    char *line = NULL;
    char line_res[3]; // results per line buffer
    line_res[2] = '\0';

    size_t len = 0;
    ssize_t read;
    size_t buffer_size = 1024;
    char *buffer = malloc(buffer_size);
    size_t buffer_pos = 0;

    while ((read = getline(&line, &len, read_file)) != -1)
    {
        // increase buffer size if needed
        if (buffer_pos + (size_t)read >= buffer_size)
        {
            buffer_size *= 2;
            char *new_buffer = realloc(buffer, buffer_size);
            buffer = new_buffer;
        }
        char *numbers = find_numbers(line, line_res);
        buffer_pos += snprintf(buffer + buffer_pos, buffer_size - buffer_pos, "%s\n", numbers);
    }

    fwrite(buffer, 1, buffer_pos, write_file);
    free(buffer);

    // get path to res file
    char *absolute_path = malloc(PATH_MAX);
    realpath(write_file_name, absolute_path);

    printf("File written at path: %s\n", absolute_path);
    free(absolute_path);

    free(line);
    fclose(read_file);
    fclose(write_file);
    return EXIT_SUCCESS;
}